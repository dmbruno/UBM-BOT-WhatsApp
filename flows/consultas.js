const { addKeyword } = require('@bot-whatsapp/bot');
const { getUserByPhone } = require('../utils/utils'); // Funci√≥n para obtener usuario por tel√©fono
const db = require('../database');

// Objeto global para almacenar datos temporales
const tempData = {};

const flowConsultas = addKeyword(['consultas'])
    .addAction(async (ctx, { flowDynamic }) => {
        const userId = ctx.from;

        // Inicializar tempData para el usuario si no existe
        tempData[userId] = tempData[userId] || { resumen: '' };

        // Obtener usuario de la base de datos
        const user = await getUserByPhone(userId);

        if (!user) {
            await flowDynamic("‚ö†Ô∏è No encontramos tu registro. Por favor, escribe 'menu' para volver al men√∫ principal.");
            return;
        }

        // Guardamos el usuario en tempData
        tempData[userId].usuario_id = user.id;
        tempData[userId].nombre = user.nombre;
        tempData[userId].correo = user.correo;

        console.log(`‚úÖ Usuario encontrado: ${user.nombre} (${userId})`);
    })
    .addAnswer(
        "üë• ¬øCu√°ntos pasajeros son?\nPor favor, indica el n√∫mero de adultos y si hay menores con edades (0 a 11 a√±os).",
        { capture: true },
        async (ctx) => {
            const userId = ctx.from;
            const input = ctx.body.trim();

            tempData[userId].pasajeros = input;
            tempData[userId].resumen += `üë• *Pasajeros:* ${input}\n`;

            console.log(`‚úÖ Pasajeros capturados: ${input}`);
        }
    )
    .addAnswer(
        "üìÖ Perfecto, ¬øen qu√© mes o meses estar√≠as disponible para viajar? (Ejemplo: Enero, Febrero, etc.)",
        { capture: true },
        async (ctx) => {
            const userId = ctx.from;
            const input = ctx.body.trim();

            tempData[userId].meses_disponibles = input;
            tempData[userId].resumen += `üìÖ *Meses disponibles:* ${input}\n`;

            console.log(`‚úÖ Meses disponibles capturados: ${input}`);
        }
    )
    .addAnswer(
        "‚è≥ ¬øCu√°ntos d√≠as te gustar√≠a viajar aproximadamente?",
        { capture: true },
        async (ctx) => {
            const userId = ctx.from;
            const input = ctx.body.trim();

            tempData[userId].duracion = input;
            tempData[userId].resumen += `‚è≥ *Duraci√≥n:* ${input} d√≠as\n`;

            console.log(`‚úÖ Duraci√≥n capturada: ${input}`);
        }
    )
    .addAnswer(
        "üåç ¬øCu√°l es tu destino preferido? ¬øTienes una segunda opci√≥n?",
        { capture: true },
        async (ctx) => {
            const userId = ctx.from;
            const input = ctx.body.trim();

            tempData[userId].destino = input;
            tempData[userId].resumen += `üåç *Destino preferido:* ${input}\n`;

            console.log(`‚úÖ Destino capturado: ${input}`);
        }
    )
    .addAnswer(
        "üìÑ Aqu√≠ tienes un resumen de tu *consulta*:",
        { capture: false },
        async (ctx, { flowDynamic }) => {
            const userId = ctx.from;

            const resumenCompleto = `üìÑ Gracias por toda la informaci√≥n, *${tempData[userId].nombre}*.\n\n` +
                `üìù Resumen de tu consulta:\n${tempData[userId].resumen}\n\n` +
                `‚ú® Nuestros agentes se comunicar√°n contigo pronto a tu correo: *${tempData[userId].correo}*. ¬°Gracias por elegirnos!`;

            await flowDynamic(resumenCompleto);

            try {
                // Guardar en la base de datos
                const { usuario_id, pasajeros, meses_disponibles, duracion, destino } = tempData[userId];
                await new Promise((resolve, reject) => {
                    db.run(
                        `INSERT INTO consultas (usuario_id, pasajeros, meses_disponibles, duracion, destino) VALUES (?, ?, ?, ?, ?)`,
                        [usuario_id, pasajeros, meses_disponibles, duracion, destino],
                        (err) => {
                            if (err) {
                                console.error("Error guardando consulta:", err.message);
                                return reject(err);
                            }
                            console.log("‚úÖ Consulta guardada correctamente.");
                            resolve();
                        }
                    );
                });

                // Limpiar tempData despu√©s de guardar
                delete tempData[userId];
                console.log(`üßπ Datos temporales limpiados para el usuario: ${userId}`);
            } catch (error) {
                console.error("‚ùå Error guardando la consulta:", error.message);
                await flowDynamic("‚ö†Ô∏è Ocurri√≥ un problema guardando tu consulta. Por favor, int√©ntalo m√°s tarde.");
            }
        }
    )
    .addAnswer(
        "‚ú® Si necesitas algo m√°s, escribe *menu* para volver al inicio.",
        { capture: false }
    );

module.exports = flowConsultas;